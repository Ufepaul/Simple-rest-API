const express = require('express');
const jwt = require('jsonwebtoken');
const bodyParser = require('body-parser');
const cors = require('cors');

// Use environment variables (or replace with your own secret)
const JWT_SECRET = process.env.JWT_SECRET || 'your_jwt_secret';
const PORT = process.env.PORT || 5000;

const app = express();

// Use CORS so your React app can talk to the backend.
app.use(cors());
app.use(bodyParser.json());

// In-memory user store - replace with your PostgreSQL queries in production
const users = [];

// Helper function to find a user by email.
const findUserByEmail = (email) => users.find((user) => user.email === email);

// Signup endpoint
app.post('/api/signup', (req, res) => {
  const { name, email, password } = req.body;

  // Basic validation
  if (!name || !email || !password) {
    return res.status(400).json({ message: 'Name, email, and password are required.' });
  }

  // Check if user already exists
  if (findUserByEmail(email)) {
    return res.status(400).json({ message: 'User already exists.' });
  }

  // In production, hash the password before saving!
  const newUser = { id: users.length + 1, name, email, password };
  users.push(newUser);

  res.status(201).json({ message: 'User created successfully.' });
});

// Login endpoint: Issue a token if email and password match.
app.post('/api/login', (req, res) => {
  const { email, password } = req.body;

  const user = findUserByEmail(email);
  if (!user || user.password !== password) {
    return res.status(401).json({ message: 'Invalid credentials.' });
  }

  // Create a token that expires in 1 hour.
  const token = jwt.sign({ id: user.id, email: user.email }, JWT_SECRET, { expiresIn: '1h' });
  res.json({ token });
});

// Middleware to verify JWT
const authenticateToken = (req, res, next) => {
  // Expect the token in the Authorization header using the Bearer scheme.
  const authHeader = req.headers['authorization'];
  const token = authHeader && authHeader.split(' ')[1];
  if (!token) return res.sendStatus(401);

  jwt.verify(token, JWT_SECRET, (err, userData) => {
    if (err) return res.sendStatus(403);
    req.user = userData;
    next();
  });
};

// A protected endpoint that returns some secure data.
app.get('/api/protected', authenticateToken, (req, res) => {
  res.json({ message: 'This is protected data', user: req.user });
});

app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});
import React, { useState } from 'react';
import LoginForm from './LoginForm';
import ProtectedPage from './ProtectedPage';

function App() {
  const [token, setToken] = useState(null);
  
  return (
    <div>
      <h1>React Auth Example</h1>
      {!token ? (
        <LoginForm setToken={setToken} />
      ) : (
        <ProtectedPage token={token} />
      )}
    </div>
  );
}

export default App;
import React, { useState } from 'react';

function LoginForm({ setToken }) {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');

  const handleSubmit = async (e) => {
    e.preventDefault();
    // Call the backend's login endpoint.
    const response = await fetch('http://localhost:5000/api/login', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ email, password }),
    });
    const data = await response.json();
    if (response.ok) {
      setToken(data.token);
    } else {
      alert(data.message || 'Login failed');
    }
  };

  return (
    <form onSubmit={handleSubmit}>
      <h2>Login</h2>
      <label>
        Email:
        <input 
          type="email" 
          value={email} 
          onChange={(e) => setEmail(e.target.value)}
          required 
        />
      </label>
      <br />
      <label>
        Password:
        <input 
          type="password" 
          value={password} 
          onChange={(e) => setPassword(e.target.value)}
          required 
        />
      </label>
      <br />
      <button type="submit">Log In</button>
    </form>
  );
}

export default LoginForm;
import React, { useEffect, useState } from 'react';

function ProtectedPage({ token }) {
  const [data, setData] = useState(null);

  useEffect(() => {
    // Fetch protected data from the backend.
    fetch('http://localhost:5000/api/protected', {
      headers: {
        'Authorization': `Bearer ${token}`,
      },
    })
      .then((res) => res.json())
      .then(setData)
      .catch(console.error);
  }, [token]);

  return (
    <div>
      <h2>Protected Data</h2>
      {data ? <pre>{JSON.stringify(data, null, 2)}</pre> : 'Loading...'}
    </div>
  );
}

export default ProtectedPage;
# Use an official Node.js runtime as the base image
FROM node:16

# Create and set the working directory
WORKDIR /usr/src/app

# Copy package files and install dependencies
COPY package*.json ./
RUN npm install

# Copy the rest of the application code
COPY . .

# Expose the port the app runs on
EXPOSE 5000

# Command to run the app
CMD [ "node", "server.js" ]
# Build stage for the React app
FROM node:16 as build

WORKDIR /usr/src/app
COPY package*.json ./
RUN npm install
COPY . .
RUN npm run build

# Production stage: Serve with a lightweight server
FROM nginx:alpine
COPY --from=build /usr/src/app/build /usr/share/nginx/html
EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]
version: "3.9"
services:
  backend:
    build: ./backend
    ports:
      - "5000:5000"
    environment:
      - JWT_SECRET=your_jwt_secret
      - PORT=5000
  frontend:
    build: ./frontend
    ports:
      - "80:80"
const path = require('path');

// Serve static files from the React app
app.use(express.static(path.join(__dirname, 'client/build')));

// Catch-all handler for any request that doesn't match an API route
app.get('*', (req, res) => {
  res.sendFile(path.join(__dirname + '/client/build/index.html'));
});
FROM node:16

WORKDIR /usr/src/app
COPY package*.json ./
RUN npm install

# Build the backend code if needed
COPY . .

# Build the React client
WORKDIR /usr/src/app/client
RUN npm install
RUN npm run build

# Return to root directory and start the server
WORKDIR /usr/src/app
EXPOSE 5000
CMD [ "node", "server.js" ]
Let's break down the three core skills depicted in your image and explore how they integrate into a fully functioning fullstack application. We'll cover:
- Making API Requests from a React Frontend
- Handling Authentication & User Sessions
- Managing State in a Fullstack Application
Below is an in-depth look at each area, along with practical code examples and strategies for implementing them.

1. Making API Requests from a React Frontend
Key Points:
- Fetch vs. Axios:
React apps often use the native fetch API or Axios for making HTTP requests. Both work well; Axios offers some convenient features like automatic JSON transformation and request cancellation.
- Asynchronous Data Fetching:
Making API calls is typically done inside React’s useEffect hook. This triggers the request after the component mounts or when dependencies change.
- Error Handling:
It’s critical to manage errors (like network failures) so that your UI can provide feedback to users.
- Security Considerations:
Be mindful of CORS and keep sensitive tokens secure (do not store them in insecure settings).
Example Using Fetch:
import React, { useEffect, useState } from 'react';

function DataDisplay() {
  const [data, setData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    fetch('https://api.example.com/data') // Replace with your API endpoint
      .then((response) => {
        if (!response.ok) {
          throw new Error('Network response was not ok');
        }
        return response.json();
      })
      .then((json) => {
        setData(json);
        setLoading(false);
      })
      .catch((err) => {
        setError(err.message);
        setLoading(false);
      });
  }, []);

  if (loading) return <div>Loading data…</div>;
  if (error) return <div>Error fetching data: {error}</div>;

  return (
    <div>
      <h2>Data from API:</h2>
      <pre>{JSON.stringify(data, null, 2)}</pre>
    </div>
  );
}

export default DataDisplay;


This pattern ensures that your component retrieves data asynchronously while handling loading and error states effectively.

2. Handling Authentication & User Sessions
Key Points:
- JWT-Based Authentication:
Typically, your Express backend issues a JSON Web Token (JWT) upon successful login. This token encapsulates user credentials and can be stored on the client-side (e.g., in localStorage or HttpOnly cookies).
- Session Management:
Beyond JWT, traditional session-based authentication might use server-side sessions with libraries like express-session, though JWT is a common choice for single-page applications.
- Token Refresh and Expiry:
You should implement token expiry, and optionally, token refresh strategies to maintain user sessions securely.
Example of Login and Token Storage in React:
import React, { useState } from 'react';

function LoginForm({ onLoginSuccess }) {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');

  const handleSubmit = async (event) => {
    event.preventDefault();
    try {
      const res = await fetch('http://localhost:5000/api/login', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ email, password }),
      });
      const data = await res.json();
      if (res.ok) {
        // Save token in a secure manner
        onLoginSuccess(data.token);
      } else {
        alert(data.message || 'Login failed');
      }
    } catch (err) {
      console.error('Error during login', err);
    }
  };

  return (
    <form onSubmit={handleSubmit}>
      <h2>Login</h2>
      <label>
        Email:
        <input
          type="email"
          value={email}
          onChange={(e) => setEmail(e.target.value)}
          required
        />
      </label>
      <br />
      <label>
        Password:
        <input
          type="password"
          value={password}
          onChange={(e) => setPassword(e.target.value)}
          required
        />
      </label>
      <br />
      <button type="submit">Log In</button>
    </form>
  );
}

export default LoginForm;


Handling Protected Routes:
For pages that require authentication, check for the token and conditionally render content or redirect. You might also use higher-order components or React Router’s protected routes feature.

3. Managing State in a Fullstack Application
Key Points:
- Local and Global State:
React components can manage local state through hooks like useState or useReducer. When multiple components require shared state (e.g., user authentication info), you might adopt a global state management solution such as Context API or Redux.
- State for API Data:
Store API responses in state, and consider caching strategies to reduce redundant network requests.
- Synchronization Between Client and Server:
Ensure that when the state on the client changes (like user login status or data fetch results), the UI updates accordingly to reflect the current application status.
Example with React Context for Authentication State:
import React, { createContext, useState, useContext } from 'react';

const AuthContext = createContext();

export const AuthProvider = ({ children }) => {
  const [token, setToken] = useState(null);
  const login = (jwtToken) => setToken(jwtToken);
  const logout = () => setToken(null);

  return (
    <AuthContext.Provider value={{ token, login, logout }}>
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => useContext(AuthContext);


Using this provider, your components can access authentication state and update their behavior (e.g., conditionally render protected components).

Integrating It All
When you integrate these skills into a fullstack app:
- React Frontend:
- Makes API calls using technologies like Fetch or Axios.
- Uses Context API or Redux to manage state and user session data.
- Includes forms and protected routes that interact with the authentication flow.
- Express Backend:
- Handles user authentication (issuing JWTs).
- Protects endpoints using middleware.
- Serves data and works with a database (like PostgreSQL) for storing user and stateful data.
- Cross-Cutting Concerns:
- Error Handling & Security: Ensure all endpoints are secure, validate data, and manage errors gracefully.
- Deployment: Both parts of your application can be containerized using Docker and deployed using services like Heroku, ensuring that the integration remains seamless in production.

This breakdown shows how the three technical skills—making API requests, handling authentication, and managing state—come together to form a complete fullstack application. Each component builds on the others, resulting in a robust, user-friendly, and scalable system.
Is there a specific area within this flow—like refining the authentication process with token refresh, diving deeper into state management with Redux, or setting up integration tests for your API requests—that you'd like to explore further?
